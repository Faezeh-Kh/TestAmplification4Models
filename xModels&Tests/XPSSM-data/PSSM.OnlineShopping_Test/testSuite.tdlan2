Package testSuite {
	//test cases
	Test Description test1 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
	}
	Test Description test2 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isCancelRequested___occurrence (returnValue = isCancelRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test3 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
	}
	Test Description test4 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
	}
	Test Description test5 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isSuspendRequested___occurrence (returnValue = isSuspendRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
	}
	Test Description test6 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPasswordAlert___occurrence (returnValue = isPasswordAlertValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = lock) to tester.reactiveGate;
	}
	Test Description test7 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
	}
	Test Description test8 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isCancelRequested___occurrence (returnValue = isCancelRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test9 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPolicyVoilated___occurrence (returnValue = isPolicyVoilatedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test10 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isSuspendRequested___occurrence (returnValue = isSuspendRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isResumeRequested___occurrence (returnValue = isResumeRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = resume) to tester.reactiveGate;
	}
	Test Description test11 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isSuspendRequested___occurrence (returnValue = isSuspendRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isLockExpired___occurrence (returnValue = isLockExpiredValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = unlock) to tester.reactiveGate;
	}
	Test Description test12 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isSuspendRequested___occurrence (returnValue = isSuspendRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isCancelRequested___occurrence (returnValue = isCancelRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test13 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isSuspendRequested___occurrence (returnValue = isSuspendRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPolicyVoilated___occurrence (returnValue = isPolicyVoilatedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test14 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPasswordAlert___occurrence (returnValue = isPasswordAlertValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = lock) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isResumeRequested___occurrence (returnValue = isResumeRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = resume) to tester.reactiveGate;
	}
	Test Description test15 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPasswordAlert___occurrence (returnValue = isPasswordAlertValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = lock) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount,
			call_occurrence = isLockExpired___occurrence (returnValue = isLockExpiredValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = unlock) to tester.reactiveGate;
	}
	Test Description test16 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPasswordAlert___occurrence (returnValue = isPasswordAlertValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = lock) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isCancelRequested___occurrence (returnValue = isCancelRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test17 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPasswordAlert___occurrence (returnValue = isPasswordAlertValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = lock) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPolicyVoilated___occurrence (returnValue = isPolicyVoilatedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test18 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isResumeRequested___occurrence (returnValue = isResumeRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = resume) to tester.reactiveGate;
	}
	Test Description test19 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isLockExpired___occurrence (returnValue = isLockExpiredValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = unlock) to tester.reactiveGate;
	}
	Test Description test20 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isCancelRequested___occurrence (returnValue = isCancelRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test21 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isVerified___occurrence (returnValue = isVerifiedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = activate) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPolicyVoilated___occurrence (returnValue = isPolicyVoilatedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test22 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isResumeRequested___occurrence (returnValue = isResumeRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = resume) to tester.reactiveGate;
	}
	Test Description test23 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isLockExpired___occurrence (returnValue = isLockExpiredValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = unlock) to tester.reactiveGate;
	}
	Test Description test24 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isCancelRequested___occurrence (returnValue = isCancelRequestedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	Test Description test25 uses configuration OnlineShoppingConfiguration{
		tester.reactiveGate sends _run (state_machine = UserAccount) to statemachine.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isUniqueId___occurrence (returnValue = isUniqueIdValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = _create) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isAccountDormant___occurrence (returnValue = isAccountDormantValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = suspend) to tester.reactiveGate;
		tester.reactiveGate sends callOperation_received (state_machine = UserAccount, 
			call_occurrence = isPolicyVoilated___occurrence (returnValue = isPolicyVoilatedValue (value = "true"))
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = cancel) to tester.reactiveGate;
	}
	
	//types
	Type CustomSystem ( statemachine of type StateMachine , signals of type Signal , operations of type Operation ) ;
	Type Signal extends NamedElement ( attributes of type Attribute ) ;
	Type Operation extends NamedElement ( inParameters of type Attribute , outParameters of type Attribute , return of type Attribute ) ;
	Type EventType ( ) with {
		abstract ;
	} ;
	Type SignalEventType extends EventType ( signal of type Signal ) ;
	Type CallEventType extends EventType ( operation of type Operation ) ;
	Type Attribute extends NamedElement ( ) with {
		abstract ;
	} ;
	Type BooleanAttribute extends Attribute ( ) ;
	Type IntegerAttribute extends Attribute ( ) ;
	Type StringAttribute extends Attribute ( ) ;
	Type Constraint ( ) with {
		abstract ;
	} ;
	Type BooleanConstraint extends Constraint ( attribute of type BooleanAttribute , value of type EBooleanObject ) ;
	Type IntegerConstraint extends Constraint ( attribute of type IntegerAttribute , value of type EIntegerObject ) ;
	Type StringConstraint extends Constraint ( attribute of type StringAttribute , value of type EString ) ;
	Type NamedElement ( _name of type EString ) with {
		abstract ;
	} ;
	Type StateMachine extends NamedElement ( regions of type Region ) ;
	Type Region extends NamedElement ( vertice of type Vertex , transitions of type Transition , stateMachine of type StateMachine , state of type State , currentVertex of type Vertex with { dynamic ;
	} ) ;
	Type Vertex extends NamedElement ( container of type Region , outgoingTransitions of type Transition , incomingTransitions of type Transition ) with {
		abstract ;
	} ;
	Type Pseudostate extends Vertex ( kind of type PseudostateKind , state of type State ) ;
	Type State extends Vertex ( regions of type Region , entry of type Behavior , doActivity of type Behavior , exit of type Behavior , deferrableTriggers of type Trigger , connectionPoint of type Pseudostate ) ;
	Type FinalState extends State ( ) ;
	Type Transition extends NamedElement ( source of type Vertex , target of type Vertex , _triggers of type Trigger , container of type Region , kind of type TransitionKind , effect of type Behavior , constraint of type Constraint ) ;
	Type Trigger extends NamedElement ( eventType of type EventType ) ;
	Type Behavior extends NamedElement ( emittedSignals of type SignalEventOccurrence ) ;
	Type OperationBehavior extends Behavior ( attributeValues of type AttributeValue ) ;
	Type AttributeValue ( ) ;
	Type BooleanAttributeValue extends AttributeValue ( attribute of type BooleanAttribute , value of type EBooleanObject ) ;
	Type IntegerAttributeValue extends AttributeValue ( attribute of type IntegerAttribute , value of type EIntegerObject ) ;
	Type StringAttributeValue extends AttributeValue ( attribute of type StringAttribute , value of type EString ) ;
	Type EventOccurrence ( ) with {
		abstract ;
	} ;
	Type CompletionEventOccurrence ( state of type State ) ;
	Type SignalEventOccurrence extends EventOccurrence ( signal of type Signal , attributeValues of type AttributeValue with { dynamic ;
	} ) ;
	Type CallEventOccurrence extends EventOccurrence ( operation of type Operation , inParameterValues of type AttributeValue with { dynamic ;
	} , outParameterValues of type AttributeValue with { dynamic ; } , returnValue of type AttributeValue with { dynamic ; } ) ;
	Type PseudostateKind ;
	Type TransitionKind ;
	Type BooleanBinaryOperator ;
	Type BooleanUnaryOperator ;
	Type IntegerComparisonOperator ;
	Type StringComparisonOperator ;
	BooleanBinaryOperator AND ;
	BooleanBinaryOperator OR ;
	BooleanUnaryOperator NOT ;
	PseudostateKind initial ;
	PseudostateKind join ;
	PseudostateKind fork ;
	PseudostateKind _terminate ;
	PseudostateKind entrypoint ;
	PseudostateKind exitpoint ;
	StringComparisonOperator _EQUALS ;
	TransitionKind internal ;
	TransitionKind local ;
	TransitionKind external ;
	IntegerComparisonOperator SMALLER ;
	IntegerComparisonOperator SMALLER_EQUALS ;
	IntegerComparisonOperator EQUALS ;
	IntegerComparisonOperator GREATER_EQUALS ;
	IntegerComparisonOperator GREATER ;
	IntegerComparisonOperator NOT_EQUALS ;
	Annotation dynamic ;
	Annotation abstract ;
	Type EByteArray ;
	Type EFloat ;
	Type EBoolean ;
	Type EFeatureMapEntry ;
	Type EResource ;
	Type EBooleanObject ;
	Type EFeatureMap ;
	Type EJavaClass ;
	Type EInvocationTargetException ;
	Type EChar ;
	Type ELongObject ;
	Type EInt ;
	Type EShort ;
	Type EJavaObject ;
	Type EBigDecimal ;
	Type EByte ;
	Type EString ;
	Type ETreeIterator ;
	Type EFloatObject ;
	Type EDate ;
	Type EDoubleObject ;
	Type EIntegerObject ;
	Type EBigInteger ;
	Type EByteObject ;
	Type EShortObject ;
	Type EEList ;
	Type ELong ;
	Type EDiagnosticChain ;
	Type EResourceSet ;
	Type EEnumerator ;
	Type ECharacterObject ;
	Type EDouble ;
	Type EMap ;
	
	//common
	Type OCL ( query of type EString ) ;
	OCL oclQuery ( query = ? ) ;
	Type Verdict ;
	Verdict PASS ;
	Verdict FAIL ;
	Verdict INCONCLUSINVE ;
	Type modelExecutionCommand ;
	modelExecutionCommand runModel ;
	modelExecutionCommand runModelAsynchronous ;
	modelExecutionCommand stopModelExecution ;
	modelExecutionCommand resetModel ;
	modelExecutionCommand getModelState ;
	
	//events
	Annotation AcceptedEvent ;
	Annotation ExposedEvent ;
	Type _run ( state_machine of type StateMachine ) with {
		AcceptedEvent ;
	} ;
	_run _run ( state_machine = ? ) ;
	Type signal_received ( state_machine of type StateMachine , signal_occurrence of type SignalEventOccurrence ) with {
		AcceptedEvent ;
	} ;
	signal_received signal_received ( state_machine = ? , signal_occurrence = ? ) ;
	Type callOperation_received ( state_machine of type StateMachine , call_occurrence of type CallEventOccurrence ) with {
		AcceptedEvent ;
	} ;
	callOperation_received callOperation_received ( state_machine = ? , call_occurrence = ? ) ;
	Type behavior_executed ( behavior of type Behavior ) with {
		ExposedEvent ;
	} ;
	behavior_executed behavior_executed ( behavior = ? ) ;
	
	//configuration
	Gate Type genericGateType accepts modelExecutionCommand ;
	Gate Type reactiveGateType accepts _run , signal_received , callOperation_received , behavior_executed ;
	Gate Type oclGateType accepts OCL ;
	
	Component Type TestSystem having {
		//gate genericGate of type genericGateType ;
		gate reactiveGate of type reactiveGateType ; 
		gate oclGate of type oclGateType ;
	}
	Component Type MUT having {
		//gate genericGate of type genericGateType ;
		gate reactiveGate of type reactiveGateType ; 
		gate oclGate of type oclGateType ;
	}
	Annotation MUTPath ;
	Annotation DSLName ;
	
	Test Configuration OnlineShoppingConfiguration {
		create Tester tester of type TestSystem ;
		create SUT statemachine of type MUT with { 
			MUTPath : '/PSSM.OnlineShopping_Mutants/OnlineShopping.model' ; 
			DSLName : 'org.imt.pssm.reactive.ReactivePSSM' ;
		} ;
		//connect tester.genericGate to statemachine.genericGate;
		connect tester.oclGate to statemachine.oclGate ;
		connect tester.reactiveGate to statemachine.reactiveGate ;
	}
	
	//test data
	StateMachine UserAccount ( _name = "UserAccount" ) ;
	Behavior _create ( _name = "create" ) ;
	Behavior cancel ( _name = "cancel" ) ;
	Behavior activate ( _name = "activate" ) ;
	Behavior suspend ( _name = "suspend" ) ;
	Behavior cancel ( _name = "cancel" ) ;
	Behavior cancel ( _name = "cancel" ) ;
	Behavior suspend ( _name = "suspend" ) ;
	Behavior lock ( _name = "lock" ) ;
	Behavior suspend ( _name = "suspend" ) ;
	Behavior cancel ( _name = "cancel" ) ;
	Behavior cancel ( _name = "cancel" ) ;
	Behavior resume ( _name = "resume" ) ;
	Behavior unlock ( _name = "unlock" ) ;
	BooleanAttribute isUniqueId ( _name = "isUniqueId" ) ;
	BooleanAttributeValue isUniqueIdValue ( attribute = isUniqueId ) ;
	Operation isUniqueId__ ( _name = "isUniqueId()" , return = isUniqueId ) ;
	CallEventOccurrence isUniqueId___occurrence ( operation = isUniqueId__ ) ;
	BooleanAttribute isAccountDormant ( _name = "isAccountDormant" ) ;
	BooleanAttributeValue isAccountDormantValue ( attribute = isAccountDormant ) ;
	Operation isAccountDormant__ ( _name = "isAccountDormant()" , return = isAccountDormant ) ;
	CallEventOccurrence isAccountDormant___occurrence ( operation = isAccountDormant__ ) ;
	BooleanAttribute isVerified ( _name = "isVerified" ) ;
	BooleanAttributeValue isVerifiedValue ( attribute = isVerified ) ;
	Operation isVerified__ ( _name = "isVerified()" , return = isVerified ) ;
	CallEventOccurrence isVerified___occurrence ( operation = isVerified__ ) ;
	BooleanAttribute isCancelRequested ( _name = "isCancelRequested" ) ;
	BooleanAttributeValue isCancelRequestedValue ( attribute = isCancelRequested ) ;
	Operation isCancelRequested__ ( _name = "isCancelRequested()" , return = isCancelRequested ) ;
	CallEventOccurrence isCancelRequested___occurrence ( operation = isCancelRequested__ ) ;
	BooleanAttribute isPolicyVoilated ( _name = "isPolicyVoilated" ) ;
	BooleanAttributeValue isPolicyVoilatedValue ( attribute = isPolicyVoilated ) ;
	Operation isPolicyVoilated__ ( _name = "isPolicyVoilated()" , return = isPolicyVoilated ) ;
	CallEventOccurrence isPolicyVoilated___occurrence ( operation = isPolicyVoilated__ ) ;
	BooleanAttribute isSuspendRequested ( _name = "isSuspendRequested" ) ;
	BooleanAttributeValue isSuspendRequestedValue ( attribute = isSuspendRequested ) ;
	Operation isSuspendRequested__ ( _name = "isSuspendRequested()" , return = isSuspendRequested ) ;
	CallEventOccurrence isSuspendRequested___occurrence ( operation = isSuspendRequested__ ) ;
	BooleanAttribute isPasswordAlert ( _name = "isPasswordAlert" ) ;
	BooleanAttributeValue isPasswordAlertValue ( attribute = isPasswordAlert ) ;
	Operation isPasswordAlert__ ( _name = "isPasswordAlert()" , return = isPasswordAlert ) ;
	CallEventOccurrence isPasswordAlert___occurrence ( operation = isPasswordAlert__ ) ;
	BooleanAttribute isResumeRequested ( _name = "isResumeRequested" ) ;
	BooleanAttributeValue isResumeRequestedValue ( attribute = isResumeRequested ) ;
	Operation isResumeRequested__ ( _name = "isResumeRequested()" , return = isResumeRequested ) ;
	CallEventOccurrence isResumeRequested___occurrence ( operation = isResumeRequested__ ) ;
	BooleanAttribute isLockExpired ( _name = "isLockExpired" ) ;
	BooleanAttributeValue isLockExpiredValue ( attribute = isLockExpired ) ;
	Operation isLockExpired__ ( _name = "isLockExpired()" , return = isLockExpired ) ;
	CallEventOccurrence isLockExpired___occurrence ( operation = isLockExpired__ ) ;
}