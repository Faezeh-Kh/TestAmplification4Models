// automatically generated by Xtext
grammar org.imt.tdl.amplification.dsl.xtext.Amplifier with org.eclipse.xtext.common.Terminals

import "http://org.imt.tdl.amplification/configuration/amplifier"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Configuration returns Configuration: 
	{Configuration}
	'config' 'amplifier' name=EString '{'
		'import' 'metamodel' metamodel=[ecore::EPackage]
		
		approach = AmplificationApproach
		'test' 'modifiers' '{'
			operators+=TestModificationOperator (',' operators+=TestModificationOperator)*
		'}'
		'filterby' filtering= (ElementCoverage | MutationAnalysis)
	'}'
;
	
AmplificationApproach: 
	Iterative | SearchBased
;

Iterative:
	{Iterative} 'iterative' 'technique'
		('stop' 'after' numOfIterations=EInt 'iterations')?
		('stop' 'when' 'score' 'reached' selectionScoreThreshold=EDouble)?
	;

SearchBased:
	{SearchBased} 'searchBased' 'technique'  
		('stop' 'when' 'score' 'reached' selectionScoreThreshold=EDouble)?
	;

TestModificationOperator returns TestModificationOperator:
	PrimitiveDataModifier | EventSequenceModifier
;

PrimitiveDataModifier: StringValueModifier | BooleanValueModifier | NumericValueModifier;

StringValueModifier: 
	'modify' policy= ApplicationPolicy (maxOccurrence=EInt)? 'string' 'values'
;
BooleanValueModifier: 
	'modify' policy= ApplicationPolicy (maxOccurrence=EInt)? 'boolean' 'values'
;
NumericValueModifier: 	
	'modify' policy= ApplicationPolicy (maxOccurrence=EInt)? 'numeric' 'values'
;

EventSequenceModifier: 
	EventCreation | EventDeletion | EventDuplication | EventModification | EventPermutation
;
EventCreation: 
	'create' policy= ApplicationPolicy (maxOccurrence=EInt)? 'missed' 'events'
;
EventDeletion: 
	'delete' policy= ApplicationPolicy (maxOccurrence=EInt)? 'events'
;
EventDuplication: 
	'duplicate' policy= ApplicationPolicy (maxOccurrence=EInt)? 'events'
;
EventModification: 
	'modify' policy= ApplicationPolicy (maxOccurrence=EInt)? 'events'
;
EventPermutation: 
	'permute' policy= ApplicationPolicy (maxOccurrence=EInt)? 'events'
;

enum ApplicationPolicy returns ApplicationPolicy:
	all = 'all'| one = 'one' | each = 'each' | first = 'first' | last = 'last' | fixed = 'atmost'
;

ElementCoverage returns ElementCoverage: 
	{ElementCoverage} 'element' 'coverage'
;

MutationAnalysis returns MutationAnalysis:
	{MutationAnalysis} 'mutation' 'score'
	('{' 
		mutantGenerator=MutantGenerator 
	 '}'
	)?
;

MutantGenerator:
	{MutantGenerator} 'generate' 'mutants' 'using' 'mutation' 'operators'
	(pathToMutationOperatorsFile=STRING)?
	(mutationOperatorGenerator=MutationOperatorGenerator)?
;

MutationOperatorGenerator: 
	'{'
		operators+=MutationOperatorType (',' operators+=MutationOperatorType)*
	'}'
;

MutationOperatorType: 
	CreationOperator | CloningOperator | RemovalOperator | ModificationOperator | RetypingOperator
;

CreationOperator: 
	{CreationOperator} 'creation' 'operators' ('for' '[' scope+=[ecore::EClass] (',' scope+=[ecore::EClass])* ']')?
;

CloningOperator: 
	{CloningOperator} 'cloning' 'operators' ('for' '[' scope+=[ecore::EClass] (',' scope+=[ecore::EClass])* ']')?
;

RemovalOperator: 
	{RemovalOperator} 'removal' 'operators' ('for' '[' scope+=[ecore::EClass] (',' scope+=[ecore::EClass])* ']')?
;

ModificationOperator: 
	{ModificationOperator} 'modification' 'operators' ('for' '[' scope+=[ecore::EClass] (',' scope+=[ecore::EClass])* ']')?
;

RetypingOperator: 
	{RetypingOperator} 'retyping' 'operators' ('for' '[' scope+=[ecore::EClass] (',' scope+=[ecore::EClass])* ']')?
;

EInt returns ecore::EInt:
	'-'? INT;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
EString returns ecore::EString:
	STRING | ID;