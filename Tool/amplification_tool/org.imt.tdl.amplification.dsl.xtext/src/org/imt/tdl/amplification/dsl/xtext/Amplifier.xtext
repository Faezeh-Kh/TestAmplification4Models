// automatically generated by Xtext
grammar org.imt.tdl.amplification.dsl.xtext.Amplifier with org.eclipse.xtext.common.Terminals

import "http://org.imt.tdl.amplification/configuration/amplifier"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Configuration returns Configuration: 
	{Configuration}
	'config' 'amplifier' name=EString '{'
		('import' 'metamodel' metamodel=[ecore::EPackage])?
		('import' 'behavioral' 'interface' behavioralInterface=EString)?
		
		approach = Iterative
		'test' 'modifiers' '{'
			operators+=TestModificationOperator (',' operators+=TestModificationOperator)*
		'}'
		
		'filterby' '{'
			filtering += TestSelectionCriterion (',' filtering += TestSelectionCriterion)*
		'}'
	'}'
;

Iterative:
	{Iterative} 'iterative' 'technique'
		('stop' 'after' numOfIterations=EInt 'iterations')?
	;

TestModificationOperator returns TestModificationOperator:
	PrimitiveDataModifier | EventSequenceModifier
;

PrimitiveDataModifier: 
	'all' 'primitive' 'modifiers' 'on' policy= ApplicationPolicy (maxOccurrence=EInt)? 'literals' |
	StringValueModifier | BooleanValueModifier | NumericValueModifier
;

StringValueModifier: 
	'modify' policy= ApplicationPolicy (maxOccurrence=EInt)? 'string' 'values'
;
BooleanValueModifier: 
	'modify' policy= ApplicationPolicy (maxOccurrence=EInt)? 'boolean' 'values'
;
NumericValueModifier: 	
	'modify' policy= ApplicationPolicy (maxOccurrence=EInt)? 'numeric' 'values'
;

EventSequenceModifier: 
	'all' 'event' 'modifiers' 'on' 
		policy= ApplicationPolicy 
		(maxOccurrence=EInt)? 
		('['scope+=EString (',' scope+=EString)*']')? 'events'
	|EventCreation | EventDeletion | EventDuplication | EventModification | EventPermutation
;
EventCreation: 
	'create' 
		policy= ApplicationPolicy 
		(maxOccurrence=EInt)? 
		('['scope+=EString (',' scope+=EString)*']')? 'missed' 'events'
;
EventDeletion: 
	'delete' policy= ApplicationPolicy 
		(maxOccurrence=EInt)? 
		('['scope+=EString (',' scope+=EString)*']')? 'events'
;
EventDuplication: 
	'duplicate' policy= ApplicationPolicy 
		(maxOccurrence=EInt)? 
		('['scope+=EString (',' scope+=EString)*']')? 'events'
;
EventModification: 
	'modify' policy= ApplicationPolicy 
		(maxOccurrence=EInt)? 
		('['scope+=EString (',' scope+=EString)*']')? 'events'
;
EventPermutation: 
	'permute' policy= ApplicationPolicy 
		(maxOccurrence=EInt)? 
		('['scope+=EString (',' scope+=EString)*']')? 'events'
;

enum ApplicationPolicy returns ApplicationPolicy:
	all = 'all'| one = 'one' | each = 'each' | first = 'first' | last = 'last' | fixed = 'atmost'
;

TestSelectionCriterion: ElementCoverage | MutationAnalysis
;

ElementCoverage returns ElementCoverage: 
	{ElementCoverage} 'element' 'coverage:' 'stop' 'at' coveragePercentageThreshold=EDouble
;

MutationAnalysis returns MutationAnalysis:
	{MutationAnalysis} 'mutation' 'score:' 'stop' 'at' mutationScoreThreshold=EDouble
	('{' 
		mutationOperatorSet=MutationOperatorSet
	 '}'
	)?
;


MutationOperatorSet: UserDefinedOperators | GeneratedOperators;

UserDefinedOperators: 'generate' 'mutants' 'using' 'mutation' 'operators'
	(pathToMutationOperators=STRING)
;

GeneratedOperators: 'generate' (mode=ApplicationMode)? 'mutants' 'using' 'mutation' 'operators'
	(pathToMutationOperators=STRING)
	'{'
		targetOperators+=MutationOperatorType (',' targetOperators+=MutationOperatorType)*
	'}'
;

enum ApplicationMode: 
	RANDOM = "one" | EXHAUSTIVE = "exhaustive"
;


MutationOperatorType: 
	CreationOperator | CloningOperator | RemovalOperator | ModificationOperator | RetypingOperator
;

CreationOperator: 
	{CreationOperator} 'creation' 'operators' 
	'for' '[' scopeSelection = ScopeSelectionStrategy ']'
	('{'
		'create' 
		(strategy += FeatureSelectionStrategy (',' strategy += FeatureSelectionStrategy)*)?
	'}')?
;

CloningOperator: 
	{CloningOperator} type=CloningType 'cloning' 'operators' 
	'for' '[' scopeSelection = ScopeSelectionStrategy ']'
;

enum CloningType: DEEP = "deep" | SHALLOW = "shallow";

RemovalOperator: 
	{RemovalOperator} 'removal' 'operators' 
	'for' '[' scopeSelection = ScopeSelectionStrategy ']'
;

ModificationOperator: 
	{ModificationOperator} 'modification' 'operators' 
	'for' '[' scopeSelection = ScopeSelectionStrategy ']'
	('{'
		'modify' 
		(strategy += FeatureSelectionStrategy (',' strategy += FeatureSelectionStrategy)*)?
	'}')?
;

FeatureSelectionStrategy: ExplicitFeatureSelection | ImplicitFeatureSelection;

ExplicitFeatureSelection: 
	targetFeature+=[ecore::EStructuralFeature] (',' targetFeature+=[ecore::EStructuralFeature])*
;

ImplicitFeatureSelection: 
	mode += FeatureSelectionMode 
	('with' 'values' 'between' intMin=EInt 'and' intMax=EInt)?
	('with' 'values' 'between' doubleMin=EDouble 'and' doubleMax=EDouble)?
	('with' 'strings' 'of' stringMin=EInt 'to' stringMax=EInt 'characters')?
	("," mode+=FeatureSelectionMode
		('with' 'values' 'between' intMin=EInt 'and' intMax=EInt)?
		('with' 'values' 'between' doubleMin=EDouble 'and' doubleMax=EDouble)?
		('with' 'strings' 'of' stringMin=EInt 'to' stringMax=EInt 'characters')?
	)*
;

enum FeatureSelectionMode: 
	ALL = "all" | RANDOM = "randomly" | REFERENCE = "references" | ATTRIBUTE = "attributes"| BOOLEAN = "booleans" | INTEGER = "integers" | DOUBLE = "doubles" | STRING = "strings"
;


RetypingOperator: 
	{RetypingOperator} 'retyping' 'operators' 
	'for' '[' scopeSelection = ScopeSelectionStrategy ']'
;

ScopeSelectionStrategy: ExplicitScopeSelection | ImplicitScopeSelection;

ExplicitScopeSelection:  scope+=[ecore::EClass] (',' scope+=[ecore::EClass])*
;

ImplicitScopeSelection: mode = ClassSelectionMode "classes";

enum ClassSelectionMode:
	ALL = "all" | RANDOM = "random" | CONCRETE = "concrete" | ABSTRACT = "abstract" 
;

EInt returns ecore::EInt:
	'-'? INT;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
EString returns ecore::EString:
	STRING | ID;