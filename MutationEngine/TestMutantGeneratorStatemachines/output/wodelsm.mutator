generate exhaustive mutants 
in "data/out/" 
from "data/model/" 
metamodel "c:/GemocStudio/workspace2/wodelsm/data/model/statemachines.ecore" 

with blocks {
	b0  {
		create Signal with { name = random-string ( 2 , 4 ) , attributes = one Attribute }
	}
	b1  {
		p = deep clone one Signal where { attributes = one Attribute } with { name = random-string ( 2 , 4 ) , attributes = one Attribute }
	}
	b2  {
		p = modify one Signal where { attributes = one Attribute } with { name = random-string ( 2 , 4 ) , attributes = one Attribute }
	}
	b3  {
		remove one Signal where { attributes = one Attribute }
	}
	b4  {
		p = select one Signal where { attributes = one Attribute }
	}
	b5  {
		p = retype one Signal as [ Operation , BooleanAttribute , IntegerAttribute , StringAttribute , StateMachine , Region , Pseudostate , State , FinalState , Transition , Trigger , Behavior , OperationBehavior ] with { name = random-string ( 2 , 4 ) }
	}
	b6  {
		create Operation with { name = random-string ( 2 , 4 ) , inParameters = one Attribute , outParameters = one Attribute , return = one Attribute }
	}
	b7  {
		p = deep clone one Operation where { inParameters = one Attribute or outParameters = one Attribute or return = one Attribute } with { name = random-string ( 2 , 4 ) , inParameters = one Attribute , outParameters = one Attribute , return = one Attribute }
	}
	b8  {
		p = modify one Operation where { inParameters = one Attribute or outParameters = one Attribute or return = one Attribute } with { name = random-string ( 2 , 4 ) , inParameters = one Attribute , outParameters = one Attribute , return = one Attribute }
	}
	b9  {
		remove one Operation where { inParameters = one Attribute or outParameters = one Attribute or return = one Attribute }
	}
	b10  {
		p = select one Operation where { inParameters = one Attribute or outParameters = one Attribute or return = one Attribute }
	}
	b11  {
		p = retype one Operation as [ Signal , BooleanAttribute , IntegerAttribute , StringAttribute , StateMachine , Region , Pseudostate , State , FinalState , Transition , Trigger , Behavior , OperationBehavior ] with { name = random-string ( 2 , 4 ) }
	}
	b12  {
		create SignalEventType with { signal = one Signal }
	}
	b13  {
		p = deep clone one SignalEventType where { signal = one Signal } with { signal = one Signal }
	}
	b14  {
		p = modify one SignalEventType where { signal = one Signal } with { signal = one Signal }
	}
	b15  {
		remove one SignalEventType where { signal = one Signal }
	}
	b16  {
		p = select one SignalEventType where { signal = one Signal }
	}
	b17  {
		p = retype one SignalEventType as [ CallEventType ]
	}
	b18  {
		create CallEventType with { operation = one Operation }
	}
	b19  {
		p = deep clone one CallEventType where { operation = one Operation } with { operation = one Operation }
	}
	b20  {
		p = modify one CallEventType where { operation = one Operation } with { operation = one Operation }
	}
	b21  {
		remove one CallEventType where { operation = one Operation }
	}
	b22  {
		p = select one CallEventType where { operation = one Operation }
	}
	b23  {
		p = retype one CallEventType as [ SignalEventType ]
	}
	b24  {
		create BooleanAttribute with { name = random-string ( 2 , 4 ) }
	}
	b25  {
		p = deep clone one BooleanAttribute with { name = random-string ( 2 , 4 ) }
	}
	b26  {
		p = modify one BooleanAttribute with { name = random-string ( 2 , 4 ) }
	}
	b27  {
		remove one BooleanAttribute
	}
	b28  {
		p = select one BooleanAttribute
	}
	b29  {
		p = retype one BooleanAttribute as [ IntegerAttribute , StringAttribute ] with { name = random-string ( 2 , 4 ) }
	}
	b30  {
		create IntegerAttribute with { name = random-string ( 2 , 4 ) }
	}
	b31  {
		p = deep clone one IntegerAttribute with { name = random-string ( 2 , 4 ) }
	}
	b32  {
		p = modify one IntegerAttribute with { name = random-string ( 2 , 4 ) }
	}
	b33  {
		remove one IntegerAttribute
	}
	b34  {
		p = select one IntegerAttribute
	}
	b35  {
		p = retype one IntegerAttribute as [ BooleanAttribute , StringAttribute ] with { name = random-string ( 2 , 4 ) }
	}
	b36  {
		create StringAttribute with { name = random-string ( 2 , 4 ) }
	}
	b37  {
		p = deep clone one StringAttribute with { name = random-string ( 2 , 4 ) }
	}
	b38  {
		p = modify one StringAttribute with { name = random-string ( 2 , 4 ) }
	}
	b39  {
		remove one StringAttribute
	}
	b40  {
		p = select one StringAttribute
	}
	b41  {
		p = retype one StringAttribute as [ BooleanAttribute , IntegerAttribute ] with { name = random-string ( 2 , 4 ) }
	}
	b42  {
		create BooleanConstraint with { expression = one BooleanExpression }
	}
	b43  {
		p = deep clone one BooleanConstraint where { expression = one BooleanExpression } with { expression = one BooleanExpression }
	}
	b44  {
		p = modify one BooleanConstraint where { expression = one BooleanExpression } with { expression = one BooleanExpression }
	}
	b45  {
		remove one BooleanConstraint where { expression = one BooleanExpression }
	}
	b46  {
		p = select one BooleanConstraint where { expression = one BooleanExpression }
	}
	b47  {
		p = retype one BooleanConstraint as [ IntegerConstraint , StringConstraint ]
	}
	b48  {
		create IntegerConstraint with { expression = one IntegerComparisonExpression }
	}
	b49  {
		p = deep clone one IntegerConstraint where { expression = one IntegerComparisonExpression } with { expression = one IntegerComparisonExpression }
	}
	b50  {
		p = modify one IntegerConstraint where { expression = one IntegerComparisonExpression } with { expression = one IntegerComparisonExpression }
	}
	b51  {
		remove one IntegerConstraint where { expression = one IntegerComparisonExpression }
	}
	b52  {
		p = select one IntegerConstraint where { expression = one IntegerComparisonExpression }
	}
	b53  {
		p = retype one IntegerConstraint as [ BooleanConstraint , StringConstraint ]
	}
	b54  {
		create StringConstraint with { expression = one StringComparisonExpression }
	}
	b55  {
		p = deep clone one StringConstraint where { expression = one StringComparisonExpression } with { expression = one StringComparisonExpression }
	}
	b56  {
		p = modify one StringConstraint where { expression = one StringComparisonExpression } with { expression = one StringComparisonExpression }
	}
	b57  {
		remove one StringConstraint where { expression = one StringComparisonExpression }
	}
	b58  {
		p = select one StringConstraint where { expression = one StringComparisonExpression }
	}
	b59  {
		p = retype one StringConstraint as [ BooleanConstraint , IntegerConstraint ]
	}
	b60  {
		create StateMachine with { name = random-string ( 2 , 4 ) , regions = one Region }
	}
	b61  {
		p = deep clone one StateMachine where { regions = one Region } with { name = random-string ( 2 , 4 ) , regions = one Region }
	}
	b62  {
		p = modify one StateMachine where { regions = one Region } with { name = random-string ( 2 , 4 ) , regions = one Region }
	}
	b63  {
		remove one StateMachine where { regions = one Region }
	}
	b64  {
		p = select one StateMachine where { regions = one Region }
	}
	b65  {
		p = retype one StateMachine as [ Signal , Operation , BooleanAttribute , IntegerAttribute , StringAttribute , Region , Pseudostate , State , FinalState , Transition , Trigger , Behavior , OperationBehavior ] with { name = random-string ( 2 , 4 ) }
	}
	b66  {
		create Region with { name = random-string ( 2 , 4 ) , vertice = one Vertex , transitions = one Transition , stateMachine = one StateMachine , state = one State , currentVertex = one Vertex }
	}
	b67  {
		p = deep clone one Region where { vertice = one Vertex or transitions = one Transition or stateMachine = one StateMachine or state = one State or currentVertex = one Vertex } with { name = random-string ( 2 , 4 ) , vertice = one Vertex , transitions = one Transition , stateMachine = one StateMachine , state = one State , currentVertex = one Vertex }
	}
	b68  {
		p = modify one Region where { vertice = one Vertex or transitions = one Transition or stateMachine = one StateMachine or state = one State or currentVertex = one Vertex } with { name = random-string ( 2 , 4 ) , vertice = one Vertex , transitions = one Transition , stateMachine = one StateMachine , state = one State , currentVertex = one Vertex }
	}
	b69  {
		remove one Region where { vertice = one Vertex or transitions = one Transition or stateMachine = one StateMachine or state = one State or currentVertex = one Vertex }
	}
	b70  {
		p = select one Region where { vertice = one Vertex or transitions = one Transition or stateMachine = one StateMachine or state = one State or currentVertex = one Vertex }
	}
	b71  {
		p = retype one Region as [ Signal , Operation , BooleanAttribute , IntegerAttribute , StringAttribute , StateMachine , Pseudostate , State , FinalState , Transition , Trigger , Behavior , OperationBehavior ] with { name = random-string ( 2 , 4 ) }
	}
	b72  {
		create Pseudostate with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , state = one State }
	}
	b73  {
		p = deep clone one Pseudostate where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or state = one State } with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , state = one State }
	}
	b74  {
		p = modify one Pseudostate where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or state = one State } with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , state = one State }
	}
	b75  {
		remove one Pseudostate where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or state = one State }
	}
	b76  {
		p = select one Pseudostate where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or state = one State }
	}
	b77  {
		p = retype one Pseudostate where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition } as [ State , FinalState ] with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition }
	}
	b78  {
		create State with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , regions = one Region , entry = one Behavior , doActivity = one Behavior , exit = one Behavior , deferrableTriggers = one Trigger , connectionPoint = one Pseudostate }
	}
	b79  {
		p = deep clone one State where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or regions = one Region or entry = one Behavior or doActivity = one Behavior or exit = one Behavior or deferrableTriggers = one Trigger or connectionPoint = one Pseudostate } with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , regions = one Region , entry = one Behavior , doActivity = one Behavior , exit = one Behavior , deferrableTriggers = one Trigger , connectionPoint = one Pseudostate }
	}
	b80  {
		p = modify one State where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or regions = one Region or entry = one Behavior or doActivity = one Behavior or exit = one Behavior or deferrableTriggers = one Trigger or connectionPoint = one Pseudostate } with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , regions = one Region , entry = one Behavior , doActivity = one Behavior , exit = one Behavior , deferrableTriggers = one Trigger , connectionPoint = one Pseudostate }
	}
	b81  {
		remove one State where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or regions = one Region or entry = one Behavior or doActivity = one Behavior or exit = one Behavior or deferrableTriggers = one Trigger or connectionPoint = one Pseudostate }
	}
	b82  {
		p = select one State where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or regions = one Region or entry = one Behavior or doActivity = one Behavior or exit = one Behavior or deferrableTriggers = one Trigger or connectionPoint = one Pseudostate }
	}
	b83  {
		p = retype one State where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition } as [ FinalState , Pseudostate ] with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition }
	}
	b84  {
		create FinalState with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , regions = one Region , entry = one Behavior , doActivity = one Behavior , exit = one Behavior , deferrableTriggers = one Trigger , connectionPoint = one Pseudostate }
	}
	b85  {
		p = deep clone one FinalState where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or regions = one Region or entry = one Behavior or doActivity = one Behavior or exit = one Behavior or deferrableTriggers = one Trigger or connectionPoint = one Pseudostate } with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , regions = one Region , entry = one Behavior , doActivity = one Behavior , exit = one Behavior , deferrableTriggers = one Trigger , connectionPoint = one Pseudostate }
	}
	b86  {
		p = modify one FinalState where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or regions = one Region or entry = one Behavior or doActivity = one Behavior or exit = one Behavior or deferrableTriggers = one Trigger or connectionPoint = one Pseudostate } with { name = random-string ( 2 , 4 ) , ^container = one Region , outgoingTransitions = one Transition , incomingTransitions = one Transition , regions = one Region , entry = one Behavior , doActivity = one Behavior , exit = one Behavior , deferrableTriggers = one Trigger , connectionPoint = one Pseudostate }
	}
	b87  {
		remove one FinalState where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or regions = one Region or entry = one Behavior or doActivity = one Behavior or exit = one Behavior or deferrableTriggers = one Trigger or connectionPoint = one Pseudostate }
	}
	b88  {
		p = select one FinalState where { ^container = one Region or outgoingTransitions = one Transition or incomingTransitions = one Transition or regions = one Region or entry = one Behavior or doActivity = one Behavior or exit = one Behavior or deferrableTriggers = one Trigger or connectionPoint = one Pseudostate }
	}
	b89  {
		create Transition with { name = random-string ( 2 , 4 ) , ^source = one Vertex , ^target = one Vertex , triggers = one Trigger , ^container = one Region , effect = one Behavior , constraint = one Constraint }
	}
	b90  {
		p = deep clone one Transition where { ^source = one Vertex or ^target = one Vertex or triggers = one Trigger or ^container = one Region or effect = one Behavior or constraint = one Constraint } with { name = random-string ( 2 , 4 ) , ^source = one Vertex , ^target = one Vertex , triggers = one Trigger , ^container = one Region , effect = one Behavior , constraint = one Constraint }
	}
	b91  {
		p = modify one Transition where { ^source = one Vertex or ^target = one Vertex or triggers = one Trigger or ^container = one Region or effect = one Behavior or constraint = one Constraint } with { name = random-string ( 2 , 4 ) , ^source = one Vertex , ^target = one Vertex , triggers = one Trigger , ^container = one Region , effect = one Behavior , constraint = one Constraint }
	}
	b92  {
		remove one Transition where { ^source = one Vertex or ^target = one Vertex or triggers = one Trigger or ^container = one Region or effect = one Behavior or constraint = one Constraint }
	}
	b93  {
		p = select one Transition where { ^source = one Vertex or ^target = one Vertex or triggers = one Trigger or ^container = one Region or effect = one Behavior or constraint = one Constraint }
	}
	b94  {
		p = retype one Transition as [ Signal , Operation , BooleanAttribute , IntegerAttribute , StringAttribute , StateMachine , Region , Pseudostate , State , FinalState , Trigger , Behavior , OperationBehavior ] with { name = random-string ( 2 , 4 ) }
	}
	b95  {
		create Trigger with { name = random-string ( 2 , 4 ) , eventType = one EventType }
	}
	b96  {
		p = deep clone one Trigger where { eventType = one EventType } with { name = random-string ( 2 , 4 ) , eventType = one EventType }
	}
	b97  {
		p = modify one Trigger where { eventType = one EventType } with { name = random-string ( 2 , 4 ) , eventType = one EventType }
	}
	b98  {
		remove one Trigger where { eventType = one EventType }
	}
	b99  {
		p = select one Trigger where { eventType = one EventType }
	}
	b100  {
		p = retype one Trigger as [ Signal , Operation , BooleanAttribute , IntegerAttribute , StringAttribute , StateMachine , Region , Pseudostate , State , FinalState , Transition , Behavior , OperationBehavior ] with { name = random-string ( 2 , 4 ) }
	}
	b101  {
		create Behavior with { name = random-string ( 2 , 4 ) , emittedSignals = one SignalEventOccurrence }
	}
	b102  {
		p = deep clone one Behavior where { emittedSignals = one SignalEventOccurrence } with { name = random-string ( 2 , 4 ) , emittedSignals = one SignalEventOccurrence }
	}
	b103  {
		p = modify one Behavior where { emittedSignals = one SignalEventOccurrence } with { name = random-string ( 2 , 4 ) , emittedSignals = one SignalEventOccurrence }
	}
	b104  {
		remove one Behavior where { emittedSignals = one SignalEventOccurrence }
	}
	b105  {
		p = select one Behavior where { emittedSignals = one SignalEventOccurrence }
	}
	b106  {
		p = retype one Behavior as [ OperationBehavior , Signal , Operation , BooleanAttribute , IntegerAttribute , StringAttribute , StateMachine , Region , Pseudostate , State , FinalState , Transition , Trigger ] with { name = random-string ( 2 , 4 ) }
	}
	b107  {
		create OperationBehavior with { name = random-string ( 2 , 4 ) , emittedSignals = one SignalEventOccurrence , attributeValues = one AttributeValue }
	}
	b108  {
		p = deep clone one OperationBehavior where { emittedSignals = one SignalEventOccurrence or attributeValues = one AttributeValue } with { name = random-string ( 2 , 4 ) , emittedSignals = one SignalEventOccurrence , attributeValues = one AttributeValue }
	}
	b109  {
		p = modify one OperationBehavior where { emittedSignals = one SignalEventOccurrence or attributeValues = one AttributeValue } with { name = random-string ( 2 , 4 ) , emittedSignals = one SignalEventOccurrence , attributeValues = one AttributeValue }
	}
	b110  {
		remove one OperationBehavior where { emittedSignals = one SignalEventOccurrence or attributeValues = one AttributeValue }
	}
	b111  {
		p = select one OperationBehavior where { emittedSignals = one SignalEventOccurrence or attributeValues = one AttributeValue }
	}
	b112  {
		create BooleanAttributeValue with { attribute = one BooleanAttribute }
	}
	b113  {
		p = deep clone one BooleanAttributeValue where { attribute = one BooleanAttribute } with { attribute = one BooleanAttribute }
	}
	b114  {
		p = modify one BooleanAttributeValue where { attribute = one BooleanAttribute } with { attribute = one BooleanAttribute }
	}
	b115  {
		remove one BooleanAttributeValue where { attribute = one BooleanAttribute }
	}
	b116  {
		p = select one BooleanAttributeValue where { attribute = one BooleanAttribute }
	}
	b117  {
		p = retype one BooleanAttributeValue as [ IntegerAttributeValue , StringAttributeValue ]
	}
	b118  {
		create IntegerAttributeValue with { attribute = one IntegerAttribute }
	}
	b119  {
		p = deep clone one IntegerAttributeValue where { attribute = one IntegerAttribute } with { attribute = one IntegerAttribute }
	}
	b120  {
		p = modify one IntegerAttributeValue where { attribute = one IntegerAttribute } with { attribute = one IntegerAttribute }
	}
	b121  {
		remove one IntegerAttributeValue where { attribute = one IntegerAttribute }
	}
	b122  {
		p = select one IntegerAttributeValue where { attribute = one IntegerAttribute }
	}
	b123  {
		p = retype one IntegerAttributeValue as [ BooleanAttributeValue , StringAttributeValue ]
	}
	b124  {
		create StringAttributeValue with { value = random-string ( 2 , 4 ) , attribute = one StringAttribute }
	}
	b125  {
		p = deep clone one StringAttributeValue where { attribute = one StringAttribute } with { value = random-string ( 2 , 4 ) , attribute = one StringAttribute }
	}
	b126  {
		p = modify one StringAttributeValue where { attribute = one StringAttribute } with { value = random-string ( 2 , 4 ) , attribute = one StringAttribute }
	}
	b127  {
		remove one StringAttributeValue where { attribute = one StringAttribute }
	}
	b128  {
		p = select one StringAttributeValue where { attribute = one StringAttribute }
	}
	b129  {
		p = retype one StringAttributeValue as [ BooleanAttributeValue , IntegerAttributeValue ]
	}
	b130  {
		create IntegerComparisonExpression with { operand1 = one IntegerAttribute , operand2 = one IntegerAttribute }
	}
	b131  {
		p = deep clone one IntegerComparisonExpression where { operand1 = one IntegerAttribute or operand2 = one IntegerAttribute } with { operand1 = one IntegerAttribute , operand2 = one IntegerAttribute }
	}
	b132  {
		p = modify one IntegerComparisonExpression where { operand1 = one IntegerAttribute or operand2 = one IntegerAttribute } with { operand1 = one IntegerAttribute , operand2 = one IntegerAttribute }
	}
	b133  {
		remove one IntegerComparisonExpression where { operand1 = one IntegerAttribute or operand2 = one IntegerAttribute }
	}
	b134  {
		p = select one IntegerComparisonExpression where { operand1 = one IntegerAttribute or operand2 = one IntegerAttribute }
	}
	b135  {
		p = retype one IntegerComparisonExpression as [ StringComparisonExpression , BooleanBinaryExpression , BooleanUnaryExpression ]
	}
	b136  {
		create StringComparisonExpression with { operand1 = one StringAttribute , operand2 = one StringAttribute }
	}
	b137  {
		p = deep clone one StringComparisonExpression where { operand1 = one StringAttribute or operand2 = one StringAttribute } with { operand1 = one StringAttribute , operand2 = one StringAttribute }
	}
	b138  {
		p = modify one StringComparisonExpression where { operand1 = one StringAttribute or operand2 = one StringAttribute } with { operand1 = one StringAttribute , operand2 = one StringAttribute }
	}
	b139  {
		remove one StringComparisonExpression where { operand1 = one StringAttribute or operand2 = one StringAttribute }
	}
	b140  {
		p = select one StringComparisonExpression where { operand1 = one StringAttribute or operand2 = one StringAttribute }
	}
	b141  {
		p = retype one StringComparisonExpression as [ IntegerComparisonExpression , BooleanBinaryExpression , BooleanUnaryExpression ]
	}
	b142  {
		create BooleanBinaryExpression with { operand1 = one BooleanAttribute , operand2 = one BooleanAttribute }
	}
	b143  {
		p = deep clone one BooleanBinaryExpression where { operand1 = one BooleanAttribute or operand2 = one BooleanAttribute } with { operand1 = one BooleanAttribute , operand2 = one BooleanAttribute }
	}
	b144  {
		p = modify one BooleanBinaryExpression where { operand1 = one BooleanAttribute or operand2 = one BooleanAttribute } with { operand1 = one BooleanAttribute , operand2 = one BooleanAttribute }
	}
	b145  {
		remove one BooleanBinaryExpression where { operand1 = one BooleanAttribute or operand2 = one BooleanAttribute }
	}
	b146  {
		p = select one BooleanBinaryExpression where { operand1 = one BooleanAttribute or operand2 = one BooleanAttribute }
	}
	b147  {
		p = retype one BooleanBinaryExpression as [ BooleanUnaryExpression ]
	}
	b148  {
		create BooleanUnaryExpression with { operand = one BooleanAttribute }
	}
	b149  {
		p = deep clone one BooleanUnaryExpression where { operand = one BooleanAttribute } with { operand = one BooleanAttribute }
	}
	b150  {
		p = modify one BooleanUnaryExpression where { operand = one BooleanAttribute } with { operand = one BooleanAttribute }
	}
	b151  {
		remove one BooleanUnaryExpression where { operand = one BooleanAttribute }
	}
	b152  {
		p = select one BooleanUnaryExpression where { operand = one BooleanAttribute }
	}
	b153  {
		p = retype one BooleanUnaryExpression as [ BooleanBinaryExpression ]
	}
	b154  {
		create CompletionEventOccurrence with { state = one State }
	}
	b155  {
		p = deep clone one CompletionEventOccurrence where { state = one State } with { state = one State }
	}
	b156  {
		p = modify one CompletionEventOccurrence where { state = one State } with { state = one State }
	}
	b157  {
		remove one CompletionEventOccurrence where { state = one State }
	}
	b158  {
		p = select one CompletionEventOccurrence where { state = one State }
	}
	b159  {
		create SignalEventOccurrence with { signal = one Signal , attributeValues = one AttributeValue }
	}
	b160  {
		p = deep clone one SignalEventOccurrence where { signal = one Signal or attributeValues = one AttributeValue } with { signal = one Signal , attributeValues = one AttributeValue }
	}
	b161  {
		p = modify one SignalEventOccurrence where { signal = one Signal or attributeValues = one AttributeValue } with { signal = one Signal , attributeValues = one AttributeValue }
	}
	b162  {
		remove one SignalEventOccurrence where { signal = one Signal or attributeValues = one AttributeValue }
	}
	b163  {
		p = select one SignalEventOccurrence where { signal = one Signal or attributeValues = one AttributeValue }
	}
	b164  {
		p = retype one SignalEventOccurrence as [ CallEventOccurrence ]
	}
	b165  {
		create CallEventOccurrence with { operation = one Operation , inParameterValues = one AttributeValue , outParameterValues = one AttributeValue , returnValue = one AttributeValue }
	}
	b166  {
		p = deep clone one CallEventOccurrence where { operation = one Operation or inParameterValues = one AttributeValue or outParameterValues = one AttributeValue or returnValue = one AttributeValue } with { operation = one Operation , inParameterValues = one AttributeValue , outParameterValues = one AttributeValue , returnValue = one AttributeValue }
	}
	b167  {
		p = modify one CallEventOccurrence where { operation = one Operation or inParameterValues = one AttributeValue or outParameterValues = one AttributeValue or returnValue = one AttributeValue } with { operation = one Operation , inParameterValues = one AttributeValue , outParameterValues = one AttributeValue , returnValue = one AttributeValue }
	}
	b168  {
		remove one CallEventOccurrence where { operation = one Operation or inParameterValues = one AttributeValue or outParameterValues = one AttributeValue or returnValue = one AttributeValue }
	}
	b169  {
		p = select one CallEventOccurrence where { operation = one Operation or inParameterValues = one AttributeValue or outParameterValues = one AttributeValue or returnValue = one AttributeValue }
	}
	b170  {
		p = retype one CallEventOccurrence as [ SignalEventOccurrence ]
	}
	
}
